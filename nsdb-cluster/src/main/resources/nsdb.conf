# Copyright 2018-2020 Radicalbit S.r.l.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

nsdb {

  node {
    hostname = 127.0.0.1
    hostname = ${?NODE_HOSTNAME}
    port = 2552
    port = ${?NODE_PORT}
  }

  grpc {
    interface = "0.0.0.0"
    interface = ${?GRPC_INTERFACE}
    port = 7817
    port = ${?GRPC_PORT}
  }

  http {
    interface = "0.0.0.0"
    interface = ${?HTTP_INTERFACE}
    port = 9000
    port = ${?HTTP_PORT}
    https-port = 9443
    https-port = ${?HTTPS_PORT}
  }

  storage {
    base-path  = "data"
    index-path = ${nsdb.storage.base-path}"/index"
    commit-log-path = ${nsdb.storage.base-path}"/cl"
    metadata-path = ${nsdb.storage.base-path}"/metadata"
    strategy = "memory"
    strategy = ${?STORAGE_STRATEGY}
  }

  commit-log {
    serializer = "io.radicalbit.nsdb.commit_log.StandardCommitLogSerializer"
    writer = "io.radicalbit.nsdb.commit_log.RollingCommitLogFileWriter"
    // Size expressed in KB
    max-size = 10000000
    passivate-after = 1h
    passivate-after = ${?PASSIVATION_PERIOD}
  }

  cluster {
    replication-factor = 1
    replication-factor = ${?REPLICATION_FACTOR}
    # Cluster parameter specific for metrics extension.
    # metrics-selector = heap
    # metrics-selector = load
    # metrics-selector = cpu
    # metrics-selector = mix
    metrics-selector = disk
    metrics-selector = ${?METRIC_SELECTOR}
    mode = native
    mode = ${?CLUSTER_MODE}
    required-contact-point-nr = 1
    required-contact-point-nr = ${?CONTACT_POINT_NR}
    metadata-write-consistency = "all"
    metadata-write-consistency = ${?METADATA_WRITE_CONSISTENCY}
    endpoints = [
      {
        host = ${nsdb.node.hostname}
        port = 8558
      }
    ]
  }

  sharding {
    interval = 1d
    interval = ${?SHARD_INTERVAL}
    passivate-after = 1h
    passivate-after = ${?PASSIVATION_PERIOD}
  }

  security {
    enabled = false
    enabled = ${?SECURITY_ENABLED}
    auth-provider-class = ""
  }

  read {
    parallelism {
      initial-size = 5
      initial-size = ${?PARALLELISM_INITIAL}
      lower-bound = 2
      lower-bound = ${?PARALLELISM_LOWER_BOUND}
      upper-bound = 15
      upper-bound = ${?PARALLELISM_UPPER_BOUND}
    }
  }

  write {
    retry-attempts = 10
    retry-attempts = ${?WRITE_ATTEMPTS}
  }

  global.timeout = 30 seconds
  global.timeout = ${?GLOBAL_TIMEOUT}
  http-endpoint.timeout = 60 seconds
  http-endpoint.timeout = ${?HTTP_TIMEOUT}
  rpc-endpoint.timeout = 30 seconds
  rpc-endpoint.timeout = ${?RPC_TIMEOUT}
  rpc-akka-endpoint.timeout = 30 seconds
  rpc-akka-endpoint.timeout = ${?RPC_AKKA_TIMEOUT}

  read-coordinator.timeout = 30 seconds
  read-coordinator.timeout = ${?READ_COORDINATOR_TIMEOUT}
  metadata-coordinator.timeout = 30 seconds
  metadata-coordinator.timeout = ${?METADATA_COORDINATOR_TIMEOUT}
  write-coordinator.timeout = 30 seconds
  write-coordinator.timeout = ${?WRITE_COORDINATOR_TIMEOUT}
  namespace-schema.timeout = 30 seconds
  namespace-schema.timeout = ${?NAMESPACE_SCHEMA_TIMEOUT}
  namespace-data.timeout = 30 seconds
  namespace-data.timeout = ${?NAMESPACE_DATA_TIMEOUT}
  publisher.timeout = 30 seconds
  publisher.timeout = ${?PUBLISHER_TIMEOUT}
  publisher.scheduler.interval = 5 seconds

  write.scheduler.interval = 15 seconds
  write.scheduler.interval = ${?PERSIST_INTERVAL}

  retention.check.interval = 30 seconds
  retention.check.interval = ${?RETENTION_CHECK_INTERVAL}

  stream.timeout = 30 seconds
  stream.timeout = ${?STREAM_TIMEOUT}

  websocket {
    // Websocket publish period expressed in milliseconds
    refresh-period = 100
    refresh-period = ${?WS_REFRESH_PERIOD}
    //Websocket retention size
    retention-size = 10
    retention-size = ${?WS_RETENTION_SIZE}
  }

  retry-policy {
    delay = 1 second
    delay = ${?RETRY_POLICY_DELAY}

    n-retries = 2
    n-retries = ${?RETRY_POLICY_N_RETRIES}
  }
}
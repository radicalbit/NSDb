# Copyright 2018 Radicalbit S.r.l.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

akka {
  loglevel = "ERROR"

  log-dead-letters = 10
  log-dead-letters-during-shutdown = off

  actor {
    provider = cluster

    control-aware-dispatcher {
      mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"

    }

    warn-about-java-serializer-usage = false

    debug {
      lifecycle = off
      receive = off
    }
  }

  remote {
    artery {
      canonical.hostname = 127.0.0.1
      enabled = on
      transport = tcp
      canonical.port = 2552
    }
  }

  discovery {
    config.services = {
      NSDb = {
        endpoints = [
          {
            host = "127.0.0.1"
            port = 8558
          },
          {
            host = "127.0.0.2"
            port = 8558
          },
          {
            host = "127.0.0.3"
            port = 8558
          }
        ]
      }
    }
  }

  management {
    http.hostname = "127.0.0.1"
    cluster.bootstrap.contact-point-discovery {
      service-name = "NSDb"
      discovery-method = "config"
      required-contact-point-nr = 3
    }
  }

  log-dead-letters = 10
  log-dead-letters-during-shutdown = on

  extensions = ["akka.cluster.pubsub.DistributedPubSub", "io.radicalbit.nsdb.cluster.extension.RemoteAddress"]

  cluster {
    distributed-data {
      durable {
        keys = ["schema-cache-*", "metric-info-cache-*"]
        lmdb.dir = ${nsdb.index.base-path}/"ddata"
        lmdb.write-behind-interval = 200 ms
      }
    }
  }

  http.server.idle-timeout = 1 hour
}

nsdb {

  grpc {
    interface = "0.0.0.0"
    port = 7817
    port = ${?GRPC_PORT}
  }

  http {
    interface = "0.0.0.0"
    interface = ${?HTTP_INTERFACE}
    port = 9000
    https-port = 9443
    port = ${?HTTP_PORT}
    https-port = ${?HTTPS_PORT}
    api.path = "api"
    api.version = "v0.1"
  }

  index {
    base-path= "data/index"
  }

  commit-log {
    serializer = "io.radicalbit.nsdb.commit_log.StandardCommitLogSerializer"
    writer = "io.radicalbit.nsdb.commit_log.RollingCommitLogFileWriter"
    directory = "/tmp/"
    max-size = 50000
    passivate-after = 1h
  }

  cluster{
    replication-factor = 2
    consistency-level = 2
  }

  sharding {
    interval = 5 ms
    passivate-after = 1h
  }

  security {
    enabled = false
    auth-provider-class = ""
  }

  read {
    parallelism {
      initial-size = 5
      lower-bound= 2
      upper-bound = 15
    }
  }

  write {
    retry-attempts = 10
  }

  global.timeout = 30 seconds
  global.timeout = ${?GLOBAL_TIMEOUT}
  http-endpoint.timeout = 60 seconds
  http-endpoint.timeout = ${?HTTP_TIMEOUT}
  rpc-endpoint.timeout = 30 seconds
  rpc-endpoint.timeout = ${?RPC_TIMEOUT}
  rpc-akka-endpoint.timeout = 30 seconds
  rpc-akka-endpoint.timeout = ${?RPC_AKKA_TIMEOUT}

  read-coordinator.timeout = 30 seconds
  read-coordinator.timeout = ${?READ_COORDINATOR_TIMEOUT}
  metadata-coordinator.timeout = 30 seconds
  metadata-coordinator.timeout = ${?METADATA_COORDINATOR_TIMEOUT}
  write-coordinator.timeout = 30 seconds
  write-coordinator.timeout = ${?WRITE_COORDINATOR_TIMEOUT}
  namespace-schema.timeout = 30 seconds
  namespace-schema.timeout = ${?NAMESPACE_SCHEMA_TIMEOUT}
  namespace-data.timeout = 30 seconds
  namespace-data.timeout = ${?NAMESPACE_DATA_TIMEOUT}
  publisher.timeout = 30 seconds
  publisher.timeout = ${?PUBLISHER_TIMEOUT}
  publisher.scheduler.interval = 5 seconds

  write.scheduler.interval = 5 seconds
  retention.check.interval = 30 seconds

  stream.timeout = 30 seconds
  stream.timeout = ${?STREAM_TIMEOUT}

  websocket {
    // Websocket publish period expressed in milliseconds
    refresh-period = 100
    //Websocket retention size
    retention-size = 10
  }
}

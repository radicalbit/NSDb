# Copyright 2018 Radicalbit S.r.l.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

akka {
  loglevel = "DEBUG"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  log-dead-letters = 10
  log-dead-letters-during-shutdown = off

  actor {
    provider = cluster

    control-aware-dispatcher {
      mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
    }

    debug {
      lifecycle = off
      receive = off
    }
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp" ]
    #In case of SSL enabled in akka.remote.netty.tcp.enable-ssl
    enabled-transports-ssl = ["akka.remote.netty.ssl"]
    #Uncomment in case of SSL conf
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      hostname = ${?AKKA_HOSTNAME}
      port = 2552
      enable-ssl = false
    }
    netty.ssl = ${akka.remote.netty.tcp}
    netty.ssl = {
      # Enable SSL/TLS encryption.
      # This must be enabled on both the client and server to work.
      enable-ssl = false
      security {
        # This is the Java Key Store used by the server connection
        key-store = "/opt/certs/server.keystore"

        # This password is used for decrypting the key store
        key-store-password = "nsdb.key"

        # This password is used for decrypting the key
        key-password = "nsdb.key"

        # This is the Java Key Store used by the client connection
        trust-store = "/opt/certs/server.truststore"

        # This password is used for decrypting the trust store
        trust-store-password = "nsdb.key"

        # Protocol to use for SSL encryption, choose from:
        # Java 6 & 7:
        #   'SSLv3', 'TLSv1'
        # Java 7:
        #   'TLSv1.1', 'TLSv1.2'
        protocol = "TLSv1.2"

        # Example: ["TLS_RSA_WITH_AES_128_CBC_SHA", "TLS_RSA_WITH_AES_256_CBC_SHA"]
        # You need to install the JCE Unlimited Strength Jurisdiction Policy
        # Files to use AES 256.
        # More info here:
        # http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html#SunJCEProvider
        enabled-algorithms = ["TLS_RSA_WITH_AES_128_CBC_SHA"]

        random-number-generator = "AES128CounterSecureRNG"
      }
    }
  }

  cluster {
    seed-nodes = ["akka.tcp://nsdb@"${akka.remote.netty.tcp.hostname}":2552"]
    #In case of SSL enabled in akka.remote.netty.tcp.enable-ssl
    seed-nodes-ssl = ["akka.ssl.tcp://nsdb@"${akka.remote.netty.tcp.hostname}":2552"]
  }

  log-dead-letters = 10
  log-dead-letters-during-shutdown = on

  extensions = ["akka.cluster.client.ClusterClientReceptionist", "akka.cluster.pubsub.DistributedPubSub",
                "io.radicalbit.nsdb.cluster.extension.RemoteAddress"]

  http.server.idle-timeout = 1 hour
}

nsdb {

  http {
    interface = "0.0.0.0"
    interface = ${?HTTP_INTERFACE}
    port = 9000
    https-port = 9443
    port = ${?HTTP_PORT}
    https-port = ${?HTTPS_PORT}
    api.path = "api"
    api.version = "v0.1"
  }

  index {
    base-path= "data/index"
  }

  commit-log {
    enabled = false
    serializer = "io.radicalbit.nsdb.commit_log.StandardCommitLogSerializer"
    writer = "io.radicalbit.nsdb.commit_log.RollingCommitLogFileWriter"
    directory = "/tmp/"
    max-size = 50000
  }

  sharding {
    interval = 1d
  }

  security {
    enabled = false
    auth-provider-class = ""
  }

  read {
    parallelism {
      initial-size = 5
      lower-bound= 2
      upper-bound = 15
    }
  }

  global.timeout = 30 seconds
  global.timeout = ${?GLOBAL_TIMEOUT}
  http-endpoint.timeout = 60 seconds
  http-endpoint.timeout = ${?HTTP_TIMEOUT}
  rpc-endpoint.timeout = 30 seconds
  rpc-endpoint.timeout = ${?RPC_TIMEOUT}
  rpc-akka-endpoint.timeout = 30 seconds
  rpc-akka-endpoint.timeout = ${?RPC_AKKA_TIMEOUT}

  read-coordinatoor.timeout = 30 seconds
  read-coordinatoor.timeout = ${?READ_COORDINATOR_TIMEOUT}
  metadata-coordinator.timeout = 30 seconds
  metadata-coordinator.timeout = ${?METADATA_COORDINATOR_TIMEOUT}
  write-coordinator.timeout = 30 seconds
  write-coordinator.timeout = ${?WRITE_COORDINATOR_TIMEOUT}
  namespace-schema.timeout = 30 seconds
  namespace-schema.timeout = ${?NAMESPACE_SCHEMA_TIMEOUT}
  namespace-data.timeout = 30 seconds
  namespace-data.timeout = ${?NAMESPACE_DATA_TIMEOUT}
  publisher.timeout = 30 seconds
  publisher.timeout = ${?PUBLISHER_TIMEOUT}
  publisher.scheduler.interval = 5 seconds

  write.scheduler.interval = 15 seconds

  stream.timeout = 30 seconds
  stream.timeout = ${?STREAM_TIMEOUT}

  websocket {
    // Websocket publish period expressed in milliseconds
    refresh-period = 100
    //Websocket retention size
    retention-size = 10
  }
}

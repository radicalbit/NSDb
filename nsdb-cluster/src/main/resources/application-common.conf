# Copyright 2018-2020 Radicalbit S.r.l.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

// populated from higher level configs
storageBaseDir = ""

akka {
  loglevel = "DEBUG"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  log-dead-letters = 10
  log-dead-letters-during-shutdown = off

  serialization.jackson.jackson-json.compression {
    algorithm = gzip
    compress-larger-than = 1024 KiB
  }


  actor {
    provider = cluster

    serialization-bindings {
      "io.radicalbit.nsdb.common.protocol.NSDbSerializable" = jackson-json
      "com.swissborg.lithium.internals.LithiumSeenChanged" = java
      "com.swissborg.lithium.internals.LithiumReachabilityChanged" = java
    }

    control-aware-dispatcher {
      mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
    }

    debug {
      lifecycle = off
      receive = off
    }
  }

  extensions = ["akka.cluster.pubsub.DistributedPubSub", "io.radicalbit.nsdb.cluster.extension.RemoteAddress", "akka.cluster.metrics.ClusterMetricsExtension"]

  remote.artery.advanced.maximum-frame-size = 30000 KiB

  cluster {
      metrics.collector.sample-interval = 10s
      distributed-data {
        durable {
          keys = ["schema-cache-*", "metric-info-cache-*", "all-metric-info-cache", "coordinates-cache"]
          // populated from higher level configs
          lmdb.dir = ""
          lmdb.write-behind-interval = 200 ms
        }
      }
    }

  log-dead-letters = 10
  log-dead-letters-during-shutdown = on

  http.server.idle-timeout = 1 hour
}

akka.cluster.downing-provider-class = "com.swissborg.lithium.DowningProviderImpl"

com.swissborg.lithium {
  active-strategy = "keep-majority"

  # Duration during which the cluster must be stable before taking
  # action on the network-partition. The duration must chose large
  # enough to allow for membership events to be gossiped and persistent
  # actor to be migrated.
  stable-after = 60s
}
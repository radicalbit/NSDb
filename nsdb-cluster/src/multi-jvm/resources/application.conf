
akka.loglevel = ERROR
akka.actor {
  provider = "cluster"

  serialization-bindings {
    "io.radicalbit.nsdb.common.protocol.NSDbSerializable" = jackson-json
  }

  control-aware-dispatcher {
    mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
  }
}
akka.log-dead-letters-during-shutdown = off
nsdb {

  retry-policy {
    delay = 1 second
    n-retries = 2
  }

  grpc {
    interface = "0.0.0.0"
    port = 7817
  }

  global.timeout = 30 seconds
  read-coordinator.timeout = 10 seconds
  namespace-schema.timeout = 10 seconds
  namespace-data.timeout = 10 seconds
  rpc-endpoint.timeout = 30 seconds
  publisher.timeout = 10 seconds
  publisher.scheduler.interval = 5 seconds
  write.scheduler.interval = 15 seconds
  retention.check.interval = 1 seconds

  cluster {
    metrics-selector = disk
    metadata-write-consistency = "all"
    replication-factor = 2
  }

  sharding {
    interval = 1d
    passivate-after = 1h
  }

  read {
    parallelism {
      initial-size = 1
      lower-bound= 1
      upper-bound = 1
    }
  }

  write {
    retry-attempts = 10
  }

  storage {
    base-path  = "target/test_index/MetadataTest"
    index-path = ${nsdb.storage.base-path}"/index"
    commit-log-path = ${nsdb.storage.base-path}"/commit_log"
    metadata-path = ${nsdb.storage.base-path}"/metadata"
  }

  write-coordinator.timeout = 5 seconds
  metadata-coordinator.timeout = 5 seconds
  commit-log {
    serializer = "io.radicalbit.nsdb.commit_log.StandardCommitLogSerializer"
    writer = "io.radicalbit.nsdb.commit_log.RollingCommitLogFileWriter"
    directory = "target/commitLog"
    max-size = 50000
    passivate-after = 5s
  }

  heartbeat.interval = 1 second

  websocket {
    refresh-period = 100
    retention-size = 10
  }
  math {
    precision = 10
  }
}